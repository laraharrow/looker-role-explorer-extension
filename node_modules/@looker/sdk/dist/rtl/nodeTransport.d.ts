import { Authenticator, HttpMethod, ITransport, ITransportSettings, SDKResponse } from './transport';
import rq, { Request } from 'request';
import rp from 'request-promise-native';
import { Readable } from 'readable-stream';
declare type RequestOptions = rq.RequiredUriUrl & rp.RequestPromiseOptions;
export declare class NodeTransport implements ITransport {
    private readonly options;
    apiPath: string;
    constructor(options: ITransportSettings);
    request<TSuccess, TError>(method: HttpMethod, path: string, queryParams?: any, body?: any, authenticator?: Authenticator, options?: Partial<ITransportSettings>): Promise<SDKResponse<TSuccess, TError>>;
    /**
     * Http method dispatcher from general-purpose options
     * @param {RequestOptions} options
     * @returns {request.Request}
     */
    requestor(options: RequestOptions): Request;
    /** `stream` creates and manages a stream of the request data
     *
     * ```ts
     * let prom = await request.stream(async (readable) => {
     *    return myService.uploadStreaming(readable).promise()
     * })
     * ```
     *
     * Streaming generally occurs only if Looker sends the data in a streaming fashion via a push url,
     * however it will also wrap non-streaming attachment data so that actions only need a single implementation.
     *
     * @returns A promise returning the same value as the callback's return value.
     * This promise will resolve after the stream has completed and the callback's promise
     * has also resolved.
     * @param callback A function will be called with a Node.js or Browser `Readable` object.
     * The readable object represents the streaming data.
     */
    stream<TSuccess>(callback: (readable: Readable) => Promise<TSuccess>, method: HttpMethod, path: string, queryParams?: any, body?: any, authenticator?: Authenticator, options?: Partial<ITransportSettings>): Promise<TSuccess>;
    /**
     * should the request verify SSL?
     * @param {Partial<ITransportSettings>} options Defaults to the instance options values
     * @returns {boolean} true if the request should require full SSL verification
     */
    verifySsl(options?: Partial<ITransportSettings>): boolean | undefined;
    /**
     * Request timeout in seconds
     * @param {Partial<ITransportSettings>} options Defaults to the instance options values
     * @returns {number | undefined}
     */
    timeout(options?: Partial<ITransportSettings>): number;
    private initRequest;
    private ok;
}
export {};
